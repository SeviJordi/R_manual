[
  {
    "objectID": "programming.html",
    "href": "programming.html",
    "title": "Programming in R",
    "section": "",
    "text": "R is a powerful programming language that allows you to write scripts and functions to automate tasks, perform complex analyses, and create custom visualizations. In this section, we will cover some basic programming concepts in R, such as control structures, and packages.\n\n\nControl structures allow you to control the flow of execution in your R scripts. The main control structures in R are:\n\nif statements: Execute a block of code if a condition is true.\nfor loops: Iterate over a sequence of values.\nwhile loops: Execute a block of code while a condition is true.\n\n\n# Example of an if statement\nx &lt;- 10\nif (x &gt; 5) {\n  print(\"x is greater than 5\")\n}\n\n[1] \"x is greater than 5\"\n\n# Example of a for loop\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n# Example of a while loop\ni &lt;- 1\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nWrite a script that prints the numbers from 1 to 10, but only if the number is odd.\n\nHint: You can use the modulo operator %% to check if a number is odd.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nfor (i in 1:10) {\n  if (i %% 2 == 1) {\n    print(i)\n  }\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n\n\n\n\n\n\n\n\nR packages are collections of functions, data, and documentation that extend the capabilities of R. There are thousands of packages available on the Comprehensive R Archive Network (CRAN) and other repositories. To use a package in R, you need to install it using the install.packages function and then load it using the library function.\n\n# Install the ggplot2 package\ninstall.packages(\"ggplot2\")\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\nOnce you have loaded a package, you can use its functions and data sets in your R scripts. For example, the ggplot2 package provides functions for creating high-quality visualizations in R.\n\n\n\n\n\n\nExercise\n\n\n\n\nInstall and load the dplyr package in R.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Install the dplyr package\ninstall.packages(\"dplyr\")\n\n# Load the dplyr package\nlibrary(dplyr)",
    "crumbs": [
      "7. Programming"
    ]
  },
  {
    "objectID": "programming.html#control-structures",
    "href": "programming.html#control-structures",
    "title": "Programming in R",
    "section": "",
    "text": "Control structures allow you to control the flow of execution in your R scripts. The main control structures in R are:\n\nif statements: Execute a block of code if a condition is true.\nfor loops: Iterate over a sequence of values.\nwhile loops: Execute a block of code while a condition is true.\n\n\n# Example of an if statement\nx &lt;- 10\nif (x &gt; 5) {\n  print(\"x is greater than 5\")\n}\n\n[1] \"x is greater than 5\"\n\n# Example of a for loop\nfor (i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n# Example of a while loop\ni &lt;- 1\nwhile (i &lt;= 5) {\n  print(i)\n  i &lt;- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nWrite a script that prints the numbers from 1 to 10, but only if the number is odd.\n\nHint: You can use the modulo operator %% to check if a number is odd.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nfor (i in 1:10) {\n  if (i %% 2 == 1) {\n    print(i)\n  }\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9",
    "crumbs": [
      "7. Programming"
    ]
  },
  {
    "objectID": "programming.html#packages",
    "href": "programming.html#packages",
    "title": "Programming in R",
    "section": "",
    "text": "R packages are collections of functions, data, and documentation that extend the capabilities of R. There are thousands of packages available on the Comprehensive R Archive Network (CRAN) and other repositories. To use a package in R, you need to install it using the install.packages function and then load it using the library function.\n\n# Install the ggplot2 package\ninstall.packages(\"ggplot2\")\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\nOnce you have loaded a package, you can use its functions and data sets in your R scripts. For example, the ggplot2 package provides functions for creating high-quality visualizations in R.\n\n\n\n\n\n\nExercise\n\n\n\n\nInstall and load the dplyr package in R.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Install the dplyr package\ninstall.packages(\"dplyr\")\n\n# Load the dplyr package\nlibrary(dplyr)",
    "crumbs": [
      "7. Programming"
    ]
  },
  {
    "objectID": "data_man.html",
    "href": "data_man.html",
    "title": "Data manipulation",
    "section": "",
    "text": "For data manipulation in R, you can use functions from the dplyr package. The dplyr package provides a set of functions that make it easy to filter, select, mutate, and summarize data, consult the dplyr cheet sheet. Dplyr package is part of the tidyverse, a collection of R packages designed for data science. Tidyverse package can be installed using the following command:\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse) # Load the tidyverse package\n\nSome key functions from the dplyr package include:\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\n\n\n\n\nfilter()\nSubset rows based on conditions\nfilter(df, Age &gt; 25)\n\n\nselect()\nChoose specific columns\nselect(df, Name, Score)\n\n\nmutate()\nAdd or modify columns\nmutate(df, NewScore = Score + 5)\n\n\narrange()\nSort rows by column values\narrange(df, desc(Score))\n\n\nsummarize()\nCreate summary statistics\nsummarize(df, AvgScore = mean(Score))\n\n\ngroup_by()\nGroup data for grouped operations\ngroup_by(df, Passed)\n\n\n\nSome examples of usage:\n\n# The iris dataset is included in R by default\n# Filter rows where Sepal.Length &gt; 3\nfiltered_iris &lt;- filter(iris, Sepal.Length &gt; 3)\n\n# Select Sepal.Length and Sepal.Width columns\nselected_iris &lt;- select(iris, Sepal.Length, Sepal.Width)\n\n# Add the product of Petal.Length and Petal.Width as a new column\nmutated_iris &lt;- mutate(iris,\n                       Petal.Area = Petal.Length * Petal.Width\n                )\n\n# Sort data by Sepal.Length in descending order\narranged_iris &lt;- arrange(iris, desc(Sepal.Length))\n\n# Group by Species and calculate the mean Sepal.Length for each group\ngrouped_summary &lt;- iris %&gt;%\n  group_by(Species) %&gt;%\n  summarize(AvgSepalLength = mean(Sepal.Length))\n\n\n\n\n\n\n\nTip\n\n\n\nUse the pipe operator %&gt;% to chain multiple dplyr functions together. The pipe operator passes the output of one function as the input to the next function.\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nFor this exercise, use the kleb_data dataset. https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv.\n\nHow many different countries are represented in the dataset?\nWhat is the maximum and minimum year of collection (Year) in the dataset?\n\n3 Get the average MIC (use the meropenem_MIC_clean column) for each sequence type (ST). Sort the results by the average MIC in ascending order.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv\")\n\n# Exercise 1\ndata$Country %&gt;% unique() %&gt;% length()\n\n[1] 29\n\n# Use the $ operator to access a column in a data frame.\n# Look for the n_distinct() function in the dplyr package and try it.\n\n# Exercise 2\ndata$Year %&gt;% max()\n\n[1] 2014\n\ndata$Year %&gt;% min()\n\n[1] 2012\n\n# Exercise 3\ndata %&gt;%\n  group_by(ST) %&gt;%\n  summarize(AvgMIC = mean(meropenem_MIC_clean)) %&gt;%\n  arrange(desc(AvgMIC))\n\n# A tibble: 250 × 2\n   ST     AvgMIC\n   &lt;chr&gt;   &lt;dbl&gt;\n 1 ST1961   48  \n 2 ST3666   48  \n 3 ST512    43.3\n 4 ST258    31.0\n 5 ST525    18.7\n 6 ST395    16.4\n 7 ST449    16.0\n 8 ST38     16  \n 9 ST101    13.3\n10 ST274    10  \n# ℹ 240 more rows",
    "crumbs": [
      "4. Data management"
    ]
  },
  {
    "objectID": "data_man.html#excercises",
    "href": "data_man.html#excercises",
    "title": "Data manipulation",
    "section": "",
    "text": "Exercise\n\n\n\nFor this exercise, use the kleb_data dataset. https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv.\n\nHow many different countries are represented in the dataset?\nWhat is the maximum and minimum year of collection (Year) in the dataset?\n\n3 Get the average MIC (use the meropenem_MIC_clean column) for each sequence type (ST). Sort the results by the average MIC in ascending order.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv\")\n\n# Exercise 1\ndata$Country %&gt;% unique() %&gt;% length()\n\n[1] 29\n\n# Use the $ operator to access a column in a data frame.\n# Look for the n_distinct() function in the dplyr package and try it.\n\n# Exercise 2\ndata$Year %&gt;% max()\n\n[1] 2014\n\ndata$Year %&gt;% min()\n\n[1] 2012\n\n# Exercise 3\ndata %&gt;%\n  group_by(ST) %&gt;%\n  summarize(AvgMIC = mean(meropenem_MIC_clean)) %&gt;%\n  arrange(desc(AvgMIC))\n\n# A tibble: 250 × 2\n   ST     AvgMIC\n   &lt;chr&gt;   &lt;dbl&gt;\n 1 ST1961   48  \n 2 ST3666   48  \n 3 ST512    43.3\n 4 ST258    31.0\n 5 ST525    18.7\n 6 ST395    16.4\n 7 ST449    16.0\n 8 ST38     16  \n 9 ST101    13.3\n10 ST274    10  \n# ℹ 240 more rows",
    "crumbs": [
      "4. Data management"
    ]
  },
  {
    "objectID": "stats.html",
    "href": "stats.html",
    "title": "Statistical analysis",
    "section": "",
    "text": "R is a powerful tool for statistical analysis. It provides a wide range of functions and packages for conducting statistical tests, modeling data, and exploring relationships between variables. In this section, we’ll cover some basic statistical analysis techniques using R.\n\n\nDescriptive statistics are used to summarize and describe the main features of a dataset. R provides several functions for calculating descriptive statistics, such as mean, median, standard deviation, and quantiles.\nLet’s calculate some descriptive statistics for the iris dataset.\n\n# Calculate the mean, median, standard deviation, variance, range, and \n#  quantiles for Sepal.Length\n\n# Mean (average)\nmean(iris$Sepal.Length)\n\n[1] 5.843333\n\n# Median (middle value)\nmedian(iris$Sepal.Length)\n\n[1] 5.8\n\n# Standard deviation (spread of data)\nsd(iris$Sepal.Length)\n\n[1] 0.8280661\n\n# Variance (spread of data squared)\nvar(iris$Sepal.Length)\n\n[1] 0.6856935\n\n# Range (difference between max and min)\nrange(iris$Sepal.Length)\n\n[1] 4.3 7.9\n\n# Quantiles (values that divide the dataset into parts)\nquantile(iris$Sepal.Length)\n\n  0%  25%  50%  75% 100% \n 4.3  5.1  5.8  6.4  7.9 \n\n# Calculate the summary statistics Sepal.Length\nsummary(iris$Sepal.Length)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.300   5.100   5.800   5.843   6.400   7.900 \n\n\n\n\n\nHypothesis testing is used to make inferences about populations based on sample data. The most common tests include t-tests, chi-square tests, and ANOVA.\n\n\nThe t-test is implemented in R with the t.test function. A t-test compares the means of two groups to determine if they are statistically different from each other. There are two types of t-tests: one-sample t-test and two-sample t-test.\nThe one-sample t-test checks if the mean of a sample is significantly different from a known value (e.g., the population mean).\n\n# One-sample t-test\n# Check if the mean Sepal.Length is significantly different from 5.8\nt.test(iris$Sepal.Length, mu = 5.8)\n\n\n    One Sample t-test\n\ndata:  iris$Sepal.Length\nt = 0.64092, df = 149, p-value = 0.5226\nalternative hypothesis: true mean is not equal to 5.8\n95 percent confidence interval:\n 5.709732 5.976934\nsample estimates:\nmean of x \n 5.843333 \n\n\nThe output of the t-test includes the t-statistic, degrees of freedom, and p-value. The p-value indicates the probability of observing the data if the null hypothesis is true. A small p-value (typically less than 0.05) suggests that the null hypothesis should be rejected. The null hypothesis in this case for the t-test is that the means are nos different.\nThe confidence interval can be set with the conf.level parameter. By default, it is set to 0.95. It indicates the probability that the true mean lies within the interval.\nThe two-sample t-test compares the means of two independent groups. It is used to determine if the means of two groups are significantly different from each other.\n\n# Two-sample t-test\n# Check if the mean Sepal.Length is significantly different to the mean of \n#  Sepal.Width\nt.test(iris$Sepal.Length, iris$Sepal.Width)\n\n\n    Welch Two Sample t-test\n\ndata:  iris$Sepal.Length and iris$Sepal.Width\nt = 36.463, df = 225.68, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 2.63544 2.93656\nsample estimates:\nmean of x mean of y \n 5.843333  3.057333 \n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nPerform a one-sample t-test to check if the mean Sepal.Width is significantly different from 3.15. Is the same to check if it is geater than 3.15? Investigate.\n\n2.Using the data from the bd_students.csv, compare the math and science grades. Are they significantly different? Investigate.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# One-sample t-test\n# Check if the mean Sepal.Width is significantly different from 3.0\ntest &lt;- t.test(iris$Sepal.Width, mu = 3.15)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.010151\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the mean Sepal.Width is equal to 3.15.\n\n# We can also check if the mean Sepal.Width is greater than 3.15\ntest &lt;- t.test(iris$Sepal.Width, mu = 3.15, alternative = \"greater\")\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.994924\"\n\n# The p-value is greater than 0.05, so we fail to reject the null hypothesis\n#  that the mean Sepal.Width is greater than 3.15.\n\n# Two-sample t-test\n# Check if the mean math and science grades are significantly different\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\ntest &lt;- t.test(data$math, data$science)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.012949\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that the\n#  mean math and science grades are equal.\n\n\n\n\n\n\n\nThe chi-square test is used to determine if there is a significant association between two categorical variables. It is implemented in R with the chisq.test function.\nThe chi-square test returns the chi-square statistic, degrees of freedom, and p-value. A small p-value (typically less than 0.05) suggests that the null hypothesis should be rejected. The null hypothesis in this case is that the two variables are independent.\n\n# Chi-square test\n# Check if there is a significant association between the student\n#  group and the location\nchisq.test(data$stu_group, data$location)\n\n\n    Pearson's Chi-squared test\n\ndata:  data$stu_group and data$location\nX-squared = 640.17, df = 25, p-value &lt; 2.2e-16\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the student group and location are independent.\n\n\n\n\nANOVA (Analysis of Variance) is used to compare the means of three or more groups to determine if they are significantly different from each other. It is implemented in R with the aov function.\nThe ANOVA test returns the F-statistic, degrees of freedom, and p-value. A small p-value (typically less than 0.05) suggests that the null hypothesis should be rejected. The null hypothesis in this case is that the means of the groups are equal.\n\n# Test if the math grades are equal for the different student groups\nmodel &lt;- aov(math ~ stu_group, data = data) \n# Formula: dependent variable ~ independent variable\nsummary(model)\n\n              Df  Sum Sq Mean Sq F value Pr(&gt;F)    \nstu_group      5 1650427  330085    5641 &lt;2e-16 ***\nResiduals   8606  503619      59                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the math grades are equal for the different student groups.\n# It is seen in the plot we made before.\n\n\n\n\n\n\n\nExercise\n\n\n\n\nUsing the data from the bd_students.csv, perform an ANOVA test to check if the science grades are equal for the different locations. Are they significantly different? Investigate.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Test if the science grades are equal for the different locations\nmodel &lt;- aov(science ~ location, data = data)\nsummary(model)\n\n              Df  Sum Sq Mean Sq F value Pr(&gt;F)    \nlocation       5   67183   13437   60.86 &lt;2e-16 ***\nResiduals   8606 1900141     221                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the science grades are equal for the different locations.\n\n\n\n\n\n\n\nCorrelation is used to measure the strength and direction of the relationship between two continuous variables. The correlation coefficient ranges from -1 to 1, where -1 indicates a perfect negative correlation, 0 indicates no correlation, and 1 indicates a perfect positive correlation. In R, the correlation coefficient can be calculated with the cor function. To test if the correlation is statistically significant, the cor.test function can be used. It returns the correlation coefficient, p-value, and confidence interval. A small p-value (typically less than 0.05) suggests that the correlation is statistically significant.\n\n# Calculate the correlation between Sepal.Length and Sepal.Width in the \n#  iris dataset\n\ncorelation &lt;- cor(iris$Sepal.Length, iris$Sepal.Width)\nsprintf(\"The correlation coefficient is %f\", corelation)\n\n[1] \"The correlation coefficient is -0.117570\"\n\n# Is significant?\ntest &lt;- cor.test(iris$Sepal.Length, iris$Sepal.Width)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.151898\"\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nUsing the data from the bd_students.csv, calculate the correlation between the math and science grades. Is it statistically significant? Investigate.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\n\n# Calculate the correlation between the math and science grades\ncorrelation &lt;- cor(data$math, data$science)\nsprintf(\"The correlation coefficient is %f\", correlation)\n\n[1] \"The correlation coefficient is 0.802763\"\n\n# Is the correlation significant?\ntest &lt;- cor.test(data$math, data$science)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.000000\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the correlation between math and science grades is zero.\n\n\n\n\n\n\n\nLinear regression models the relationship between a dependent variable and an independent variable by fitting a linear equation to observed data. It is used to predict the value of the dependent variable based on the value of the independent variable. In R, linear regression can be performed using the lm function.\n\n# Fit a linear regression model to predict Sepal.Length from Petal.Length\nmodel &lt;- lm(Sepal.Length ~ Petal.Length, data = iris)\nsummary(model)\n\n\nCall:\nlm(formula = Sepal.Length ~ Petal.Length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.24675 -0.29657 -0.01515  0.27676  1.00269 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   4.30660    0.07839   54.94   &lt;2e-16 ***\nPetal.Length  0.40892    0.01889   21.65   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4071 on 148 degrees of freedom\nMultiple R-squared:   0.76, Adjusted R-squared:  0.7583 \nF-statistic: 468.6 on 1 and 148 DF,  p-value: &lt; 2.2e-16\n\n\nIn this case, the p-value associated with the coefficient of the independent variable indicates whether the relationship is statistically significant. A small p-value (typically less than 0.05) suggests that the independent variable is a significant predictor of the dependent variable.\nFor the linear model that we just made, the p-value is 1.0386674^{-47}. This means that the Petal.Length is a significant predictor of the Sepal.Length. Also is important to see the r-squared value, that is 0.7599546, that indicates the proportion of the variance in the dependent variable that is predictable from the independent variable.\n\n\n\n\n\n\nExercise\n\n\n\n\nUsing the data from the bd_students.csv, fit a linear regression model to predict the math grade from the science grade. Is the relationship statistically significant? How much is the proportion of variance of the math grade explained by the science grade?.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\n\n# Fit a linear regression model to predict math grade from science grade\nmodel &lt;- lm(math ~ science, data = data)\nsum &lt;- summary(model)\n\n# Is the relationship significant?\nsprintf(\"The p-value is %f\", sum$coefficients[2,4])\n\n[1] \"The p-value is 0.000000\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the science grade is not a significant predictor of the math grade.\n\n# How much of the variance in the math grade is explained by the science grade?\nsprintf(\"The proportion of variance explained is %f\", sum$r.squared)\n\n[1] \"The proportion of variance explained is 0.644428\"\n\n# The proportion of variance explained is 0.64, which means that 64% of the\n#  variance in the math grade is predictable from the science grade.",
    "crumbs": [
      "6. Statistics"
    ]
  },
  {
    "objectID": "stats.html#descriptive-statistics",
    "href": "stats.html#descriptive-statistics",
    "title": "Statistical analysis",
    "section": "",
    "text": "Descriptive statistics are used to summarize and describe the main features of a dataset. R provides several functions for calculating descriptive statistics, such as mean, median, standard deviation, and quantiles.\nLet’s calculate some descriptive statistics for the iris dataset.\n\n# Calculate the mean, median, standard deviation, variance, range, and \n#  quantiles for Sepal.Length\n\n# Mean (average)\nmean(iris$Sepal.Length)\n\n[1] 5.843333\n\n# Median (middle value)\nmedian(iris$Sepal.Length)\n\n[1] 5.8\n\n# Standard deviation (spread of data)\nsd(iris$Sepal.Length)\n\n[1] 0.8280661\n\n# Variance (spread of data squared)\nvar(iris$Sepal.Length)\n\n[1] 0.6856935\n\n# Range (difference between max and min)\nrange(iris$Sepal.Length)\n\n[1] 4.3 7.9\n\n# Quantiles (values that divide the dataset into parts)\nquantile(iris$Sepal.Length)\n\n  0%  25%  50%  75% 100% \n 4.3  5.1  5.8  6.4  7.9 \n\n# Calculate the summary statistics Sepal.Length\nsummary(iris$Sepal.Length)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.300   5.100   5.800   5.843   6.400   7.900",
    "crumbs": [
      "6. Statistics"
    ]
  },
  {
    "objectID": "stats.html#hypothesis-testing",
    "href": "stats.html#hypothesis-testing",
    "title": "Statistical analysis",
    "section": "",
    "text": "Hypothesis testing is used to make inferences about populations based on sample data. The most common tests include t-tests, chi-square tests, and ANOVA.\n\n\nThe t-test is implemented in R with the t.test function. A t-test compares the means of two groups to determine if they are statistically different from each other. There are two types of t-tests: one-sample t-test and two-sample t-test.\nThe one-sample t-test checks if the mean of a sample is significantly different from a known value (e.g., the population mean).\n\n# One-sample t-test\n# Check if the mean Sepal.Length is significantly different from 5.8\nt.test(iris$Sepal.Length, mu = 5.8)\n\n\n    One Sample t-test\n\ndata:  iris$Sepal.Length\nt = 0.64092, df = 149, p-value = 0.5226\nalternative hypothesis: true mean is not equal to 5.8\n95 percent confidence interval:\n 5.709732 5.976934\nsample estimates:\nmean of x \n 5.843333 \n\n\nThe output of the t-test includes the t-statistic, degrees of freedom, and p-value. The p-value indicates the probability of observing the data if the null hypothesis is true. A small p-value (typically less than 0.05) suggests that the null hypothesis should be rejected. The null hypothesis in this case for the t-test is that the means are nos different.\nThe confidence interval can be set with the conf.level parameter. By default, it is set to 0.95. It indicates the probability that the true mean lies within the interval.\nThe two-sample t-test compares the means of two independent groups. It is used to determine if the means of two groups are significantly different from each other.\n\n# Two-sample t-test\n# Check if the mean Sepal.Length is significantly different to the mean of \n#  Sepal.Width\nt.test(iris$Sepal.Length, iris$Sepal.Width)\n\n\n    Welch Two Sample t-test\n\ndata:  iris$Sepal.Length and iris$Sepal.Width\nt = 36.463, df = 225.68, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 2.63544 2.93656\nsample estimates:\nmean of x mean of y \n 5.843333  3.057333 \n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nPerform a one-sample t-test to check if the mean Sepal.Width is significantly different from 3.15. Is the same to check if it is geater than 3.15? Investigate.\n\n2.Using the data from the bd_students.csv, compare the math and science grades. Are they significantly different? Investigate.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# One-sample t-test\n# Check if the mean Sepal.Width is significantly different from 3.0\ntest &lt;- t.test(iris$Sepal.Width, mu = 3.15)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.010151\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the mean Sepal.Width is equal to 3.15.\n\n# We can also check if the mean Sepal.Width is greater than 3.15\ntest &lt;- t.test(iris$Sepal.Width, mu = 3.15, alternative = \"greater\")\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.994924\"\n\n# The p-value is greater than 0.05, so we fail to reject the null hypothesis\n#  that the mean Sepal.Width is greater than 3.15.\n\n# Two-sample t-test\n# Check if the mean math and science grades are significantly different\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\ntest &lt;- t.test(data$math, data$science)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.012949\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that the\n#  mean math and science grades are equal.\n\n\n\n\n\n\n\nThe chi-square test is used to determine if there is a significant association between two categorical variables. It is implemented in R with the chisq.test function.\nThe chi-square test returns the chi-square statistic, degrees of freedom, and p-value. A small p-value (typically less than 0.05) suggests that the null hypothesis should be rejected. The null hypothesis in this case is that the two variables are independent.\n\n# Chi-square test\n# Check if there is a significant association between the student\n#  group and the location\nchisq.test(data$stu_group, data$location)\n\n\n    Pearson's Chi-squared test\n\ndata:  data$stu_group and data$location\nX-squared = 640.17, df = 25, p-value &lt; 2.2e-16\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the student group and location are independent.\n\n\n\n\nANOVA (Analysis of Variance) is used to compare the means of three or more groups to determine if they are significantly different from each other. It is implemented in R with the aov function.\nThe ANOVA test returns the F-statistic, degrees of freedom, and p-value. A small p-value (typically less than 0.05) suggests that the null hypothesis should be rejected. The null hypothesis in this case is that the means of the groups are equal.\n\n# Test if the math grades are equal for the different student groups\nmodel &lt;- aov(math ~ stu_group, data = data) \n# Formula: dependent variable ~ independent variable\nsummary(model)\n\n              Df  Sum Sq Mean Sq F value Pr(&gt;F)    \nstu_group      5 1650427  330085    5641 &lt;2e-16 ***\nResiduals   8606  503619      59                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the math grades are equal for the different student groups.\n# It is seen in the plot we made before.\n\n\n\n\n\n\n\nExercise\n\n\n\n\nUsing the data from the bd_students.csv, perform an ANOVA test to check if the science grades are equal for the different locations. Are they significantly different? Investigate.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Test if the science grades are equal for the different locations\nmodel &lt;- aov(science ~ location, data = data)\nsummary(model)\n\n              Df  Sum Sq Mean Sq F value Pr(&gt;F)    \nlocation       5   67183   13437   60.86 &lt;2e-16 ***\nResiduals   8606 1900141     221                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the science grades are equal for the different locations.\n\n\n\n\n\n\n\nCorrelation is used to measure the strength and direction of the relationship between two continuous variables. The correlation coefficient ranges from -1 to 1, where -1 indicates a perfect negative correlation, 0 indicates no correlation, and 1 indicates a perfect positive correlation. In R, the correlation coefficient can be calculated with the cor function. To test if the correlation is statistically significant, the cor.test function can be used. It returns the correlation coefficient, p-value, and confidence interval. A small p-value (typically less than 0.05) suggests that the correlation is statistically significant.\n\n# Calculate the correlation between Sepal.Length and Sepal.Width in the \n#  iris dataset\n\ncorelation &lt;- cor(iris$Sepal.Length, iris$Sepal.Width)\nsprintf(\"The correlation coefficient is %f\", corelation)\n\n[1] \"The correlation coefficient is -0.117570\"\n\n# Is significant?\ntest &lt;- cor.test(iris$Sepal.Length, iris$Sepal.Width)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.151898\"\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nUsing the data from the bd_students.csv, calculate the correlation between the math and science grades. Is it statistically significant? Investigate.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\n\n# Calculate the correlation between the math and science grades\ncorrelation &lt;- cor(data$math, data$science)\nsprintf(\"The correlation coefficient is %f\", correlation)\n\n[1] \"The correlation coefficient is 0.802763\"\n\n# Is the correlation significant?\ntest &lt;- cor.test(data$math, data$science)\nsprintf(\"The p-value is %f\", test$p.value)\n\n[1] \"The p-value is 0.000000\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the correlation between math and science grades is zero.\n\n\n\n\n\n\n\nLinear regression models the relationship between a dependent variable and an independent variable by fitting a linear equation to observed data. It is used to predict the value of the dependent variable based on the value of the independent variable. In R, linear regression can be performed using the lm function.\n\n# Fit a linear regression model to predict Sepal.Length from Petal.Length\nmodel &lt;- lm(Sepal.Length ~ Petal.Length, data = iris)\nsummary(model)\n\n\nCall:\nlm(formula = Sepal.Length ~ Petal.Length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.24675 -0.29657 -0.01515  0.27676  1.00269 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   4.30660    0.07839   54.94   &lt;2e-16 ***\nPetal.Length  0.40892    0.01889   21.65   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4071 on 148 degrees of freedom\nMultiple R-squared:   0.76, Adjusted R-squared:  0.7583 \nF-statistic: 468.6 on 1 and 148 DF,  p-value: &lt; 2.2e-16\n\n\nIn this case, the p-value associated with the coefficient of the independent variable indicates whether the relationship is statistically significant. A small p-value (typically less than 0.05) suggests that the independent variable is a significant predictor of the dependent variable.\nFor the linear model that we just made, the p-value is 1.0386674^{-47}. This means that the Petal.Length is a significant predictor of the Sepal.Length. Also is important to see the r-squared value, that is 0.7599546, that indicates the proportion of the variance in the dependent variable that is predictable from the independent variable.\n\n\n\n\n\n\nExercise\n\n\n\n\nUsing the data from the bd_students.csv, fit a linear regression model to predict the math grade from the science grade. Is the relationship statistically significant? How much is the proportion of variance of the math grade explained by the science grade?.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\n\n# Fit a linear regression model to predict math grade from science grade\nmodel &lt;- lm(math ~ science, data = data)\nsum &lt;- summary(model)\n\n# Is the relationship significant?\nsprintf(\"The p-value is %f\", sum$coefficients[2,4])\n\n[1] \"The p-value is 0.000000\"\n\n# The p-value is less than 0.05, so we reject the null hypothesis that\n#  the science grade is not a significant predictor of the math grade.\n\n# How much of the variance in the math grade is explained by the science grade?\nsprintf(\"The proportion of variance explained is %f\", sum$r.squared)\n\n[1] \"The proportion of variance explained is 0.644428\"\n\n# The proportion of variance explained is 0.64, which means that 64% of the\n#  variance in the math grade is predictable from the science grade.",
    "crumbs": [
      "6. Statistics"
    ]
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "R basics",
    "section": "",
    "text": "Here’s a quick overview of R’s syntax and rules:\n\n\n\n\n\n\nTips\n\n\n\n\n\n\nUse the Tab key for auto-completion.\nUse the up arrow in the Console to cycle through previous commands.\nAccess help for any function by typing ?function_name or help(function_name).\n\n\n\n\n\n\nUse # to add comments to your code. R ignores everything after #.\n\n# This is a comment\n\n\n\n\nUse &lt;- or = to assign values to variables.\n\nvariable1 = 5 # Assigns the value 5 to variable1\nvariable2 &lt;- 10 # Assigns the value 10 to variable2\n\nThe R variables follow some naming conventions:\n\nVariable names must start with a letter and can contain letters, numbers, and underscores (_).\nAvoid using reserved words like if, for, while, etc\n\n\n\n\nR has several data types, including numeric, character, logical, and more. Here is a summary:\n\n\n\n\n\n\n\n\nData Type\nDescription\nExample\n\n\n\n\nNumeric\nNumbers, including decimals\n42, 3.14\n\n\nInteger\nWhole numbers\n5L (use L for integers)\n\n\nCharacter\nText or strings\n\"hello\", 'R'\n\n\nLogical\nBoolean values (TRUE or FALSE)\nTRUE, FALSE\n\n\n\nR automatically assigns data types based on the values you provide. You can also specify the data type using functions like as.numeric(), as.character(), and as.logical().\n\nnumeric_var &lt;- 5\ncharacter_var &lt;- \"Hello, R!\"\nlogical_var &lt;- TRUE\n\n\n\n\nR supports basic arithmetic operations like addition, subtraction, multiplication, and division.\n\n# Addition\n5 + 3\n\n[1] 8\n\n# Subtraction\n5 - 3\n\n[1] 2\n\n# Multiplication\n5 * 3\n\n[1] 15\n\n# Division\n5 / 3\n\n[1] 1.666667\n\n\n\n\n\nR uses several types of data structures to organize data. Here are the key ones:\n\n\nA vector is a collection of elements of the same data type. You can create vectors using the c() function.\n\n# The c function combines elements into a vector\nvector &lt;- c(1, 2, 3, 4, 5)\n\nAccess elements in a vector using square brackets [].\n\n# Access the first element of the vector\nvector[1]\n\n[1] 1\n\nvector[2:4] # Access elements 2 to 4\n\n[1] 2 3 4\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a vector with the numbers 1, 2, 3, 4, and 5. Access the third element of the vector.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nvector &lt;- c(1, 2, 3, 4, 5)\nvector[3]\n\n[1] 3\n\n\n\n\n\n\n\n\nA list is a collection of elements of different data types. You can create lists using the list() function.\n\n# Create a list with different data types\nmy_list &lt;- list(\"R\", 3.14, TRUE)\n\nAccess elements in a list using double square brackets [[]].\n\n# Access the first element of the list\nmy_list[[1]]\n\n[1] \"R\"\n\n\n\n\n\nA data frame is a two-dimensional data structure with rows and columns. You can create data frames using the data.frame() function.\n\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 35),\n  IsStudent = c(TRUE, FALSE, TRUE)\n)\n\nAccess data using column names or indices:\n\ndf$Name      # Access the \"Name\" column\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\ndf[1, ]      # Access the first row\n\n   Name Age IsStudent\n1 Alice  25      TRUE\n\ndf[, \"Age\"]  # Access the \"Age\" column\n\n[1] 25 30 35\n\n\n\n\n\n\nR has a wide range of built-in functions for data manipulation, statistics, and visualization. Here are some common functions:\n\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\nOutput\n\n\n\n\nsum()\nCalculate the sum of elements\nsum(c(1, 2, 3))\n6\n\n\nmean()\nCalculate the average\nmean(c(4, 5, 6))\n5\n\n\nlength()\nGet the number of elements in a vector\nlength(c(1, 2, 3))\n3\n\n\nseq()\nGenerate a sequence of numbers\nseq(1, 10, by = 2)\n1 3 5 7 9\n\n\nsort()\nSort elements in ascending order\nsort(c(3, 1, 2))\n1 2 3\n\n\nmin()\nFind the smallest value\nmin(c(4, 7, 2))\n2\n\n\nmax()\nFind the largest value\nmax(c(4, 7, 2))\n7\n\n\nround()\nRound numbers to a specified number of decimals\nround(3.14159, 2)\n3.14\n\n\nrep()\nRepeat elements\nrep(5, times = 3)\n5 5 5\n\n\nunique()\nExtract unique elements\nunique(c(1, 2, 2, 3))\n1 2 3\n\n\nclass()\nCheck the data type of an object\nclass(\"Hello\")\n\"character\"\n\n\nstr()\nDisplay the structure of an object\nstr(c(1, 2, 3))\nnum [1:3] 1 2 3\n\n\nsummary()\nGet a statistical summary of an object\nsummary(c(1, 2, 3))\nMin: 1, Max: 3…\n\n\nis.na()\nCheck for missing values\nis.na(c(1, NA, 3))\nFALSE TRUE FALSE\n\n\nna.omit()\nRemove missing values\nna.omit(c(1, NA, 3))\n1 3\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nCreate a vector with the numbers 10, 20, 30, and 40, and calculate the sum of its elements.\nCreate a data frame with columns for names, ages, and favorite colors. Try accessing the “ages” column.\nCreate a sequence of numbers from 1 to 100, but only include every 5th number.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Exercise 1\nvector &lt;- c(10, 20, 30, 40)\nsum(vector)\n\n[1] 100\n\n# Exercise 2\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 35),\n  fav_color = c(\"Red\", \"Blue\", \"Green\")\n)\ndf$Age\n\n[1] 25 30 35\n\n# Exercise 3\nseq(1, 100, by = 5)\n\n [1]  1  6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "basics.html#comments",
    "href": "basics.html#comments",
    "title": "R basics",
    "section": "",
    "text": "Use # to add comments to your code. R ignores everything after #.\n\n# This is a comment",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "basics.html#assigning-values",
    "href": "basics.html#assigning-values",
    "title": "R basics",
    "section": "",
    "text": "Use &lt;- or = to assign values to variables.\n\nvariable1 = 5 # Assigns the value 5 to variable1\nvariable2 &lt;- 10 # Assigns the value 10 to variable2\n\nThe R variables follow some naming conventions:\n\nVariable names must start with a letter and can contain letters, numbers, and underscores (_).\nAvoid using reserved words like if, for, while, etc",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "basics.html#data-types-in-r",
    "href": "basics.html#data-types-in-r",
    "title": "R basics",
    "section": "",
    "text": "R has several data types, including numeric, character, logical, and more. Here is a summary:\n\n\n\n\n\n\n\n\nData Type\nDescription\nExample\n\n\n\n\nNumeric\nNumbers, including decimals\n42, 3.14\n\n\nInteger\nWhole numbers\n5L (use L for integers)\n\n\nCharacter\nText or strings\n\"hello\", 'R'\n\n\nLogical\nBoolean values (TRUE or FALSE)\nTRUE, FALSE\n\n\n\nR automatically assigns data types based on the values you provide. You can also specify the data type using functions like as.numeric(), as.character(), and as.logical().\n\nnumeric_var &lt;- 5\ncharacter_var &lt;- \"Hello, R!\"\nlogical_var &lt;- TRUE",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "basics.html#arithmetic-operations",
    "href": "basics.html#arithmetic-operations",
    "title": "R basics",
    "section": "",
    "text": "R supports basic arithmetic operations like addition, subtraction, multiplication, and division.\n\n# Addition\n5 + 3\n\n[1] 8\n\n# Subtraction\n5 - 3\n\n[1] 2\n\n# Multiplication\n5 * 3\n\n[1] 15\n\n# Division\n5 / 3\n\n[1] 1.666667",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "basics.html#data-structures-in-r",
    "href": "basics.html#data-structures-in-r",
    "title": "R basics",
    "section": "",
    "text": "R uses several types of data structures to organize data. Here are the key ones:\n\n\nA vector is a collection of elements of the same data type. You can create vectors using the c() function.\n\n# The c function combines elements into a vector\nvector &lt;- c(1, 2, 3, 4, 5)\n\nAccess elements in a vector using square brackets [].\n\n# Access the first element of the vector\nvector[1]\n\n[1] 1\n\nvector[2:4] # Access elements 2 to 4\n\n[1] 2 3 4\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCreate a vector with the numbers 1, 2, 3, 4, and 5. Access the third element of the vector.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nvector &lt;- c(1, 2, 3, 4, 5)\nvector[3]\n\n[1] 3\n\n\n\n\n\n\n\n\nA list is a collection of elements of different data types. You can create lists using the list() function.\n\n# Create a list with different data types\nmy_list &lt;- list(\"R\", 3.14, TRUE)\n\nAccess elements in a list using double square brackets [[]].\n\n# Access the first element of the list\nmy_list[[1]]\n\n[1] \"R\"\n\n\n\n\n\nA data frame is a two-dimensional data structure with rows and columns. You can create data frames using the data.frame() function.\n\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 35),\n  IsStudent = c(TRUE, FALSE, TRUE)\n)\n\nAccess data using column names or indices:\n\ndf$Name      # Access the \"Name\" column\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\ndf[1, ]      # Access the first row\n\n   Name Age IsStudent\n1 Alice  25      TRUE\n\ndf[, \"Age\"]  # Access the \"Age\" column\n\n[1] 25 30 35",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "basics.html#basic-functions-in-r",
    "href": "basics.html#basic-functions-in-r",
    "title": "R basics",
    "section": "",
    "text": "R has a wide range of built-in functions for data manipulation, statistics, and visualization. Here are some common functions:\n\n\n\n\n\n\n\n\n\nFunction\nDescription\nExample\nOutput\n\n\n\n\nsum()\nCalculate the sum of elements\nsum(c(1, 2, 3))\n6\n\n\nmean()\nCalculate the average\nmean(c(4, 5, 6))\n5\n\n\nlength()\nGet the number of elements in a vector\nlength(c(1, 2, 3))\n3\n\n\nseq()\nGenerate a sequence of numbers\nseq(1, 10, by = 2)\n1 3 5 7 9\n\n\nsort()\nSort elements in ascending order\nsort(c(3, 1, 2))\n1 2 3\n\n\nmin()\nFind the smallest value\nmin(c(4, 7, 2))\n2\n\n\nmax()\nFind the largest value\nmax(c(4, 7, 2))\n7\n\n\nround()\nRound numbers to a specified number of decimals\nround(3.14159, 2)\n3.14\n\n\nrep()\nRepeat elements\nrep(5, times = 3)\n5 5 5\n\n\nunique()\nExtract unique elements\nunique(c(1, 2, 2, 3))\n1 2 3\n\n\nclass()\nCheck the data type of an object\nclass(\"Hello\")\n\"character\"\n\n\nstr()\nDisplay the structure of an object\nstr(c(1, 2, 3))\nnum [1:3] 1 2 3\n\n\nsummary()\nGet a statistical summary of an object\nsummary(c(1, 2, 3))\nMin: 1, Max: 3…\n\n\nis.na()\nCheck for missing values\nis.na(c(1, NA, 3))\nFALSE TRUE FALSE\n\n\nna.omit()\nRemove missing values\nna.omit(c(1, NA, 3))\n1 3",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "basics.html#excercises",
    "href": "basics.html#excercises",
    "title": "R basics",
    "section": "",
    "text": "Exercise\n\n\n\n\nCreate a vector with the numbers 10, 20, 30, and 40, and calculate the sum of its elements.\nCreate a data frame with columns for names, ages, and favorite colors. Try accessing the “ages” column.\nCreate a sequence of numbers from 1 to 100, but only include every 5th number.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Exercise 1\nvector &lt;- c(10, 20, 30, 40)\nsum(vector)\n\n[1] 100\n\n# Exercise 2\ndf &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 35),\n  fav_color = c(\"Red\", \"Blue\", \"Green\")\n)\ndf$Age\n\n[1] 25 30 35\n\n# Exercise 3\nseq(1, 100, by = 5)\n\n [1]  1  6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96",
    "crumbs": [
      "2. Basics"
    ]
  },
  {
    "objectID": "fin_proj.html",
    "href": "fin_proj.html",
    "title": "Final Project",
    "section": "",
    "text": "Final Project\nFor the final project, you will analyze a dataset of your choice using the techniques and concepts covered in this manual. You can choose any dataset that interests you or is relevant to your field of study. Here are some steps to guide you through the project:\n\nChoose a dataset: Find a dataset that interests you or is relevant to your field of study. You can use datasets from online repositories.\nExplore the dataset: Load the dataset into R and explore its structure, summary statistics, and visualizations.\nPerform data analysis: Perform descriptive statistics, hypothesis testing, and regression analysis to answer research questions or explore relationships in the data.\nCreate visualizations: Create visualizations to present your findings and insights from the data.\n\n\n\n\n\n\n\nTip\n\n\n\nYou can found a lot of datasets in the following repositories:\n\nUCI Machine Learning Repository\nKaggle Datasets\n\nYou can also uso any of the datasets that we have used in this manual.",
    "crumbs": [
      "8. Final project"
    ]
  },
  {
    "objectID": "start.html",
    "href": "start.html",
    "title": "Getting started with R",
    "section": "",
    "text": "Before we can start coding, let’s install the necessary tools:\n\n\n\nDownload the latest version of R from CRAN (Comprehensive R Archive Network).\nFollow the installation instructions for your operating system (Windows, Mac, or Linux).\n\n\n\n\n\nRStudio is an integrated development environment (IDE) for R that makes coding easier.\nDownload it from RStudio’s website.\nInstall RStudio after installing R.\n\nOnce you open RStudio, you’ll see a user-friendly interface with four main panels:\n\nConsole: This is where you type commands and see their output.\nScript Editor: Write and save your R scripts (your code files) here.\nEnvironment/History: Displays variables, data, and your command history.\nFiles/Plots/Packages/Help: View files, plots, installed packages, and access help documentation.\n\nTake a moment to explore these panels. They’ll become your primary workspace as you work with R.",
    "crumbs": [
      "1. Start"
    ]
  },
  {
    "objectID": "start.html#install-r",
    "href": "start.html#install-r",
    "title": "Getting started with R",
    "section": "",
    "text": "Download the latest version of R from CRAN (Comprehensive R Archive Network).\nFollow the installation instructions for your operating system (Windows, Mac, or Linux).",
    "crumbs": [
      "1. Start"
    ]
  },
  {
    "objectID": "start.html#install-rstudio",
    "href": "start.html#install-rstudio",
    "title": "Getting started with R",
    "section": "",
    "text": "RStudio is an integrated development environment (IDE) for R that makes coding easier.\nDownload it from RStudio’s website.\nInstall RStudio after installing R.\n\nOnce you open RStudio, you’ll see a user-friendly interface with four main panels:\n\nConsole: This is where you type commands and see their output.\nScript Editor: Write and save your R scripts (your code files) here.\nEnvironment/History: Displays variables, data, and your command history.\nFiles/Plots/Packages/Help: View files, plots, installed packages, and access help documentation.\n\nTake a moment to explore these panels. They’ll become your primary workspace as you work with R.",
    "crumbs": [
      "1. Start"
    ]
  },
  {
    "objectID": "data_viz.html",
    "href": "data_viz.html",
    "title": "Data visualization",
    "section": "",
    "text": "Data visualization is one of the most powerful ways to communicate your data insights. R has several options for creating visualizations, from base R graphics to advanced plotting libraries like ggplot2. In this section, we’ll focus on the ggplot2 package, which provides a flexible, powerful, and elegant system for creating visualizations. ggplot2 is part of the tidyverse package, so you can load it by loading the tidyverse package. See the ggplot2 cheat sheet here.\n\nlibrary(tidyverse)\n\nThe basic structure of a ggplot2 plot consists of three main components:\n\nData: The dataset you want to visualize.\nAesthetics: The mapping between variables in the data and visual properties of the plot (e.g., x-axis, y-axis, color, size).\nGeometries: The geometric objects that represent the data in the plot (e.g., points, lines, bars).\n\nWe are going to run some examples using the iris dataset, which is included in R by default.\n\n\n\nlibrary(tidyverse) # Load the tidyverse package\n\np &lt;- ggplot(iris) + # create a ggplot object with the data\n  aes(x = Sepal.Length, y = Petal.Length) + # map variables to visual properties with aes()\n  geom_point() # add points to the plot\n\np # display the plot\n\n\n\n\n\n\n\n\nWe can customize the plot by changing the labs. The labs() function is used to set the titles of the plot and axes.\n\np = p + labs(title = \"Scatter plot of Sepal.Length vs. Petal.Length\",\n         x = \"Sepal Length\",\n         y = \"Petal Length\")\np\n\n\n\n\n\n\n\n\nThe theme of the plot can be customized using the theme() function. There are some buiders themes in ggplot2, like theme_minimal(), theme_light(), theme_dark(), theme_classic(), theme_void(), and theme_bw().\n\np &lt;- p + theme_bw()\np\n\n\n\n\n\n\n\n\nFinally, we can add more variables to the plot, adding Species as the color of the dots.\n\np &lt;- p + aes(color = Species)\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nFor this exercise, use the bd_students dataset. https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv.\n\nExplore the data and undesrtand the variables.\ncreate a bar plot for the stu_group variable. Do you see any problem with the data? Try to fix it.\nCreate a scatter plot for the english and math variables. Are those variables correlated? Can you obseve any clusters in the data? Have them something to do with the stu_group variable?\n\nExplore the posibility of doing more complex plots with ggplot2. You can find more information in the ggplot2 documentation.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\n\n# Exercise 2\ndata %&gt;%\n  ggplot(aes(x = stu_group)) +\n  geom_bar() + \n  labs(title = \"Number of students by group\",\n       x = \"Student group\",\n       y = \"Number of students\") + \n  theme_bw()\n\n\n\n\n\n\n\n# We can see that there is a problem with the student groups. \n#  Sometimes they are capitalized and sometimes not. \n#  We can fix this by using the tolower() function.\n\ndata &lt;- data %&gt;%\n  mutate(stu_group = tolower(stu_group))\n\n# Now we can create the plot again\ndata %&gt;%\n  ggplot(aes(x = stu_group)) +\n  geom_bar()  + \n  labs(title = \"Number of students by group\",\n       x = \"Student group\",\n       y = \"Number of students\") + \n  theme_bw()\n\n\n\n\n\n\n\n# Exercise 3\ndata %&gt;%\n  ggplot(aes(x = english, y = math)) +\n  geom_point() +\n  labs(title = \"Scatter plot of English vs. Math\",\n       x = \"English\",\n       y = \"Math\") +\n  theme_bw()\n\n\n\n\n\n\n\n# The variables are positively correlated and there are three clusters \n#  in the data. We can color the points by the student group to see if \n#  the clusters are related to this variable.\n\ndata %&gt;%\n  ggplot(aes(x = english, y = math, color = stu_group)) +\n  geom_point() +\n  labs(title = \"Scatter plot of English vs. Math\",\n       x = \"English\",\n       y = \"Math\") +\n  theme_bw()",
    "crumbs": [
      "5. Data visualization"
    ]
  },
  {
    "objectID": "data_viz.html#create-a-scatter-plot-of-sepal.length-vs.-petal.length.",
    "href": "data_viz.html#create-a-scatter-plot-of-sepal.length-vs.-petal.length.",
    "title": "Data visualization",
    "section": "",
    "text": "library(tidyverse) # Load the tidyverse package\n\np &lt;- ggplot(iris) + # create a ggplot object with the data\n  aes(x = Sepal.Length, y = Petal.Length) + # map variables to visual properties with aes()\n  geom_point() # add points to the plot\n\np # display the plot\n\n\n\n\n\n\n\n\nWe can customize the plot by changing the labs. The labs() function is used to set the titles of the plot and axes.\n\np = p + labs(title = \"Scatter plot of Sepal.Length vs. Petal.Length\",\n         x = \"Sepal Length\",\n         y = \"Petal Length\")\np\n\n\n\n\n\n\n\n\nThe theme of the plot can be customized using the theme() function. There are some buiders themes in ggplot2, like theme_minimal(), theme_light(), theme_dark(), theme_classic(), theme_void(), and theme_bw().\n\np &lt;- p + theme_bw()\np\n\n\n\n\n\n\n\n\nFinally, we can add more variables to the plot, adding Species as the color of the dots.\n\np &lt;- p + aes(color = Species)\np",
    "crumbs": [
      "5. Data visualization"
    ]
  },
  {
    "objectID": "data_viz.html#excercises",
    "href": "data_viz.html#excercises",
    "title": "Data visualization",
    "section": "",
    "text": "Exercise\n\n\n\nFor this exercise, use the bd_students dataset. https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv.\n\nExplore the data and undesrtand the variables.\ncreate a bar plot for the stu_group variable. Do you see any problem with the data? Try to fix it.\nCreate a scatter plot for the english and math variables. Are those variables correlated? Can you obseve any clusters in the data? Have them something to do with the stu_group variable?\n\nExplore the posibility of doing more complex plots with ggplot2. You can find more information in the ggplot2 documentation.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/bd_students.csv\")\n\n# Exercise 2\ndata %&gt;%\n  ggplot(aes(x = stu_group)) +\n  geom_bar() + \n  labs(title = \"Number of students by group\",\n       x = \"Student group\",\n       y = \"Number of students\") + \n  theme_bw()\n\n\n\n\n\n\n\n# We can see that there is a problem with the student groups. \n#  Sometimes they are capitalized and sometimes not. \n#  We can fix this by using the tolower() function.\n\ndata &lt;- data %&gt;%\n  mutate(stu_group = tolower(stu_group))\n\n# Now we can create the plot again\ndata %&gt;%\n  ggplot(aes(x = stu_group)) +\n  geom_bar()  + \n  labs(title = \"Number of students by group\",\n       x = \"Student group\",\n       y = \"Number of students\") + \n  theme_bw()\n\n\n\n\n\n\n\n# Exercise 3\ndata %&gt;%\n  ggplot(aes(x = english, y = math)) +\n  geom_point() +\n  labs(title = \"Scatter plot of English vs. Math\",\n       x = \"English\",\n       y = \"Math\") +\n  theme_bw()\n\n\n\n\n\n\n\n# The variables are positively correlated and there are three clusters \n#  in the data. We can color the points by the student group to see if \n#  the clusters are related to this variable.\n\ndata %&gt;%\n  ggplot(aes(x = english, y = math, color = stu_group)) +\n  geom_point() +\n  labs(title = \"Scatter plot of English vs. Math\",\n       x = \"English\",\n       y = \"Math\") +\n  theme_bw()",
    "crumbs": [
      "5. Data visualization"
    ]
  },
  {
    "objectID": "io.html",
    "href": "io.html",
    "title": "Data import and export",
    "section": "",
    "text": "To start working with data in R, you need to import it into the R environment. R supports a wide range of file formats for data import, including CSV, Excel, and databases. You can also export data from R to different file formats.\n\n\nYou can import data into R using functions like read.csv(), read.table(). Here’s an example of importing a CSV file:\n\n# Import data from a CSV file\n# Daca can come from the internet or local files\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/iris.csv\")\n\nhead(data)  # Display the first few rows of the data\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTabular data can be separated by commas, tabs, or other delimiters. You can specify the delimiter using the sep argument in the read.csv() function. By default, it assumes a comma as the delimiter.\n\n\n\n\n\nYou can export data from R to different file formats using functions like write.csv(), write.table(). Here’s an example of exporting data to a CSV file:\n\n# Export data to a CSV file\nwrite.csv(data, \"data.csv\") # Save the data to a file named \"data.csv\"\n\nBy default, the write.csv() function includes row names in the output file. You can disable this by setting row.names = FALSE.\n\nwrite.csv(data, \"data.csv\", row.names = FALSE)\n\nwrite.csv() stores data in CSV format, but you can use write.table() to export data in other formats like tab-separated values (TSV) or plain text.\n\nwrite.table(data, \"data.txt\", sep = \"\\t\") # Export data as tab-separated values\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nRead the CSV file kleb_data.csv from the following URL: https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv.\nShow the first rows of the data.\nExport the data to a tab-separated values (TSV) file named kleb_data.tsv.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Exercise 1\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv\")\n\n# Exercise 2\nhead(data)\n\n# Exercise 3\nwrite.table(data, \"kleb_data.tsv\", sep = \"\\t\")",
    "crumbs": [
      "3. I/O"
    ]
  },
  {
    "objectID": "io.html#importing-data",
    "href": "io.html#importing-data",
    "title": "Data import and export",
    "section": "",
    "text": "You can import data into R using functions like read.csv(), read.table(). Here’s an example of importing a CSV file:\n\n# Import data from a CSV file\n# Daca can come from the internet or local files\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/iris.csv\")\n\nhead(data)  # Display the first few rows of the data\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTabular data can be separated by commas, tabs, or other delimiters. You can specify the delimiter using the sep argument in the read.csv() function. By default, it assumes a comma as the delimiter.",
    "crumbs": [
      "3. I/O"
    ]
  },
  {
    "objectID": "io.html#exporting-data",
    "href": "io.html#exporting-data",
    "title": "Data import and export",
    "section": "",
    "text": "You can export data from R to different file formats using functions like write.csv(), write.table(). Here’s an example of exporting data to a CSV file:\n\n# Export data to a CSV file\nwrite.csv(data, \"data.csv\") # Save the data to a file named \"data.csv\"\n\nBy default, the write.csv() function includes row names in the output file. You can disable this by setting row.names = FALSE.\n\nwrite.csv(data, \"data.csv\", row.names = FALSE)\n\nwrite.csv() stores data in CSV format, but you can use write.table() to export data in other formats like tab-separated values (TSV) or plain text.\n\nwrite.table(data, \"data.txt\", sep = \"\\t\") # Export data as tab-separated values",
    "crumbs": [
      "3. I/O"
    ]
  },
  {
    "objectID": "io.html#excercises",
    "href": "io.html#excercises",
    "title": "Data import and export",
    "section": "",
    "text": "Exercise\n\n\n\n\nRead the CSV file kleb_data.csv from the following URL: https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv.\nShow the first rows of the data.\nExport the data to a tab-separated values (TSV) file named kleb_data.tsv.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Exercise 1\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/SeviJordi/R_manual/refs/heads/main/data/kleb_data.csv\")\n\n# Exercise 2\nhead(data)\n\n# Exercise 3\nwrite.table(data, \"kleb_data.tsv\", sep = \"\\t\")",
    "crumbs": [
      "3. I/O"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "Preface\n\n\nHey there, and welcome! This manual is your hands-on guide to learning R, one of the most popular tools for data analysis, visualization, and statistical computing. R is an incredibly versatile programming language used by researchers, data analysts, and professionals all over the world. It’s open-source (free!), packed with powerful tools, and has a massive community of users ready to share tips and tricks. This is a Quarto book.",
    "crumbs": [
      "Home"
    ]
  }
]