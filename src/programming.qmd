# Programming in R

```{css}
#| echo: false
p {
  text-align: justify
}
```


R is a powerful programming language that allows you to write scripts and functions to automate tasks, perform complex analyses, and create custom visualizations. In this section, we will cover some basic programming concepts in R, such as control structures, and packages.

## Control Structures

Control structures allow you to control the flow of execution in your R scripts. The main control structures in R are:

-   `if` statements: Execute a block of code if a condition is true.
-   `for` loops: Iterate over a sequence of values.
-   `while` loops: Execute a block of code while a condition is true.

```{r eval=FALSE}

x <- 10 # <1>
if (x > 5) { # <1>
  print("x is greater than 5") # <1>
} # <1>

for (i in 1:5) { # <2>
  print(i) # <2>
} # <2>

i <- 1 # <3>
while (i <= 5) { # <3>
  print(i) # <3>
  i <- i + 1 # <3>
} # <3>

```

1. In this example, we use an `if` statement to check if `x` is greater than 5. If the condition is true, we print a message.
2. We use a `for` loop to print the numbers from 1 to 5.
3. We use a `while` loop to print the numbers from 1 to 5.

::: callout-important
## Exercise

1.  Write a script that prints the numbers from 1 to 10, but only if the number is odd.

Hint: You can use the modulo operator `%%` to check if a number is odd.
:::

::: {.callout-note collapse="true"}
## Solution

```{r eval=FALSE}
for (i in 1:10) { # <1>
  if (i %% 2 == 1) { # <2>
    print(i)
  }
}
```

1. We use a `for` loop to iterate over the numbers from 1 to 10.
2. We use an `if` statement to check if the number is odd (i.e., the remainder of dividing by 2 is 1).

:::

## Packages

R packages are collections of functions, data, and documentation that extend the capabilities of R. There are thousands of packages available on the Comprehensive R Archive Network (CRAN) and other repositories. To use a package in R, you need to install it using the `install.packages` function and then load it using the `library` function.

```{r eval=FALSE}
install.packages("ggplot2") # <1>
library(ggplot2) # <2>
```

1. Install the `ggplot2` package using the `install.packages` function.
2. Load the `ggplot2` package using the `library` function.


Once you have loaded a package, you can use its functions and data sets in your R scripts. For example, the `ggplot2` package provides functions for creating high-quality visualizations in R.

::: callout-important
## Exercise

1.  Install and load the `dplyr` package in R.
:::

::: {.callout-note collapse="true"}
## Solution

```{r eval=FALSE}
install.packages("dplyr")
library(dplyr)
```
:::

